<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Leen's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-07-27T14:04:23.582Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Leen]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Thinking in Java 读书笔记一--什么是对象]]></title>
    <link href="http://yoursite.com/2016/07/27/Thinking-in-Java-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B8%80-%E4%BB%80%E4%B9%88%E6%98%AF%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2016/07/27/Thinking-in-Java-读书笔记一-什么是对象/</id>
    <published>2016-07-27T13:13:25.000Z</published>
    <updated>2016-07-27T14:04:23.582Z</updated>
    <content type="html"><![CDATA[<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>几乎所有的编程语言都提供了抽象的概念。抽象的种类和质量直接关系到问题的复杂度。汇编语是对计算机机器语言的简单抽象。FORTRAN,BASIC和C等高级语言是在汇编语言上的抽象。然而，以上这些变成语言都要求编程人员从计算机系统结构的角度(面向机器建模)而不是问题结构的角度(面向问题建模)去思考和建立模型，编程人员必须建立系统模型(方案空间)和问题模型(问题空间)之间的联系，对于编码和后期的维护代价都是比较昂贵的。</p>
<h2 id="面向对象编程OOP"><a href="#面向对象编程OOP" class="headerlink" title="面向对象编程OOP"></a>面向对象编程OOP</h2><p>面向对象方法(object-oriented approach)提出了对象(object)的概念表示问题空间中的元素，对象是独立于问题空间的。面向对象编程(OOP)从问题空间的角度而不是机器的角度去考虑问题，每一个对象包含自己的属性和行为，对象之间相互通信构成了问题的解决方案。</p>
<h2 id="面向对象编程OOP的五个基本特性"><a href="#面向对象编程OOP的五个基本特性" class="headerlink" title="面向对象编程OOP的五个基本特性"></a>面向对象编程OOP的五个基本特性</h2><p>Alan Kay总结了smalltalk的5个面向对象基本特性，smalltalk是第一个成功的面向对象编程语言，Java语言是基于smalltalk而来的。</p>
<ul>
<li>所有的东西都是对象。</li>
<li>程序是由相互传递消息的许多对象构成的。</li>
<li>对象可以包含其它对象。</li>
<li>每一个对象都有一个类型。</li>
<li>所有相同类型的对象可以接受相同的消息。</li>
</ul>
<h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ul>
<li><strong>类</strong>是一个通用的概念，Java、C++、C#、PHP等很多编程语言中都有类，都可以通过类创建对象，类是一个抽象的概念，对现实世界的东西进行抽象，描述一类对象的行为和状态。</li>
<li><strong>对象</strong>是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>
</ul>
<p><img src="\imgs\light.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Light &#123;</div><div class="line">  int voltage;</div><div class="line">  int power;</div><div class="line">  </div><div class="line">  void on();</div><div class="line">  void of();</div><div class="line">  void brighten();</div><div class="line">  void dim();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上UML类图描述了类Light的属性和方法，通过<strong>class</strong>关键字定义类,Light是类名，类Light包含两个属性:voltage和power;四个方法:on(),of(),brighten(),dim()。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Light lt  = new Light();</div><div class="line">lt.on();</div></pre></td></tr></table></figure>
<p>通过new关键字创建了一个Light类型的对象，lt是该对象的引用，通过lt对对象进行操作。</p>
<h2 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>找到变化并且把它封装起来，你就可以在不影响其它部分的情况下修改或扩展被封装的变化部分，这是所有设计模式的基础，就是封装变化，因此封装的作用，就解决了程序的可扩展性。 </p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>子类继承父类，可以继承父类的方法及属性，实现了多态以及代码的重用，因此也解决了系统的重用性和扩展性，但是继承破坏了封装，因为他是对子类开放的，修改父类会导致所有子类的改变，因此继承一定程度上又破坏了系统的可扩展性，所以继承需要慎用，只有明确的IS-A关系才能使用，同时继承在在程序开发过程中重构得到的，而不是程序设计之初就使用继承，很多面向对象开发者滥用继承，结果造成后期的代码解决不了需求的变化了。因此优先使用组合，而不是继承，是面向对象开发中一个重要的经验。 </p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>接口的多种不同的实现方式即为多态。接口是对行为的抽象，刚才在封装提到，找到变化部分并封装起来，但是封装起来后，怎么适应接下来的变化？这正是接口的作用，接口的主要目的是为不相关的类提供通用的处理服务,我们可以想象一下。比如鸟会飞，但是超人也会飞，通过飞这个接口，我们可以让鸟和超人，都实现这个接口，这就实现了系统的可维护性，可扩展性。 </p>
<h2 id="Java-Object"><a href="#Java-Object" class="headerlink" title="Java Object"></a>Java Object</h2><p>Java单根结构，Java语言的单根结构是指java中所有的类都从一个基类继承，即java.lang.Object。java.lang.Object是所有类的父类，是一个顶级父类，在Java中是唯一没有父类的类。单根结构的优点是：</p>
<ul>
<li>所有的类都有同一个基本类型。</li>
<li>所有的类都继承Objecrt类的基本操作。</li>
<li>使垃圾回收(garbage collection)更容易实现。</li>
</ul>
<p>参考文献：<br>《Think in java》<br><a href="http://www.cnblogs.com/seesea125/archive/2012/04/03/2431176.html" target="_blank" rel="external">http://www.cnblogs.com/seesea125/archive/2012/04/03/2431176.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><p>几乎所有的编程语言都提供了抽象的概念。抽象的种类和质量直接关系到问题的复杂度。汇编语是对计算机机器语言的简单抽象。FORTRAN,BASIC]]>
    </summary>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="OOP" scheme="http://yoursite.com/tags/OOP/"/>
    
      <category term="Thinking in Java" scheme="http://yoursite.com/tags/Thinking-in-Java/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2016/07/22/hello-world/"/>
    <id>http://yoursite.com/2016/07/22/hello-world/</id>
    <published>2016-07-21T16:59:54.678Z</published>
    <updated>2016-07-21T17:14:11.175Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.]]>
    </summary>
    
  </entry>
  
</feed>
